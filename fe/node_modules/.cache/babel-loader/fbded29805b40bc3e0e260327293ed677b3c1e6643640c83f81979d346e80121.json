{"ast":null,"code":"import { ref } from \"vue\";\nimport { ElMessageBox } from 'element-plus';\nimport { options } from \"@/mixins/alertOption\";\nimport axios from 'axios';\nconst getDefaultState = () => {\n  return {\n    url: process.env.VUE_APP_FSM_URL_BCH_OPN_UC1_OpenBatch,\n    MS12_ConfigurationObject: {\n      screenTitle: 'Message',\n      batchno: null,\n      departmentNo: null,\n      ipAddress: null,\n      componentProps: {\n        ReferenceNosLabel: {\n          value: 'have been posted',\n          isVisible: false\n        },\n        TransactionNumbersLabel: {\n          value: 'have been posted',\n          isVisible: false\n        },\n        VoucherNosLabel: {\n          value: 'have been generated',\n          isVisible: false\n        },\n        InformationLabel: {\n          value: ref(''),\n          isVisible: true\n        },\n        voucherInfoLabel: {\n          value: 'Voucher number 7348347 has been Authorized',\n          isVisible: false\n        },\n        TransactionInfoLable: {\n          value: 'Transaction No 738545 Verified',\n          isVisible: false\n        },\n        ReferenceNumberDropDown: {\n          isDisabled: false,\n          ReferenceNosValue: 'A1231',\n          isVisible: false,\n          // set true for Visible Component and set false for invisible Component\n          ReferenceNosList: [{\n            value: 'A1231',\n            option: 'A1231'\n          }, {\n            value: 'B1231',\n            option: 'B1231'\n          }]\n        },\n        TransactionNumbersDropDown: {\n          isDisabled: false,\n          TransactionNumbersValue: '1231',\n          isVisible: false,\n          // set true for Visible Component and set false for invisible Component\n          TransactionNumbersList: [{\n            value: '1231',\n            option: '1231'\n          }]\n        },\n        VoucherNumberDropDown: {\n          isDisabled: false,\n          VoucherNosValue: '1231',\n          isVisible: false,\n          // set true for Visible Component and set false for invisible Component\n          VoucherNosList: [{\n            value: '1231',\n            option: '1231'\n          }, {\n            value: 'ABCD',\n            option: 'ABCD'\n          }]\n        },\n        OkButton: {\n          isDisabled: false,\n          isVisible: true // set true for Visible Component and set false for invisible Component\n        },\n\n        BackButton: {\n          isDisabled: false,\n          isVisible: false // set true for Visible Component and set false for invisible Component\n        },\n\n        /////////////// control hide/show of screen sections ////////////////\n        section1: {\n          isVisible: true // set true for Visible Component and set false for invisible Component\n        },\n\n        section2: {\n          isVisible: true // set true for Visible Component and set false for invisible Component\n        },\n\n        section3: {\n          isVisible: true // set true for Visible Component and set false for invisible Component\n        }\n        ////////////  control hide/show of screen sections ////////////////\n      }\n    },\n\n    MS8_configurationObject: {\n      screenTitle: \"Batch - open\",\n      batchNo: '',\n      componentProps: {\n        PasswordTextBox: {\n          isDisabled: ref(false),\n          isVisible: ref(true),\n          // uncomment this line to hide this component\n          passwordValue: ref(\"\")\n        },\n        UserNameTextBox: {\n          isDisabled: ref(true),\n          isVisible: ref(false) // uncomment this line to hide this component\n        },\n\n        AuthorizeButton: {\n          isDisabled: ref(true),\n          isVisible: ref(false) // uncomment this line to hide this component\n        },\n\n        OkButton: {\n          isDisabled: ref(false),\n          isVisible: ref(true) // uncomment this line to hide this component\n        },\n\n        BackButton: {\n          isDisabled: ref(false),\n          isVisible: ref(true) // uncomment this line to hide this component\n        },\n\n        /////////////// control hide/show of screen sections ////////////////\n        section1: {\n          isVisible: ref(true) // set true for Visible Component and set false for invisible Component\n        },\n\n        section2: {\n          isVisible: ref(true) // set true for Visible Component and set false for invisible Component\n        },\n\n        section3: {\n          isVisible: ref(true) // set true for Visible Component and set false for invisible Component\n        }\n        ////////////  control hide/show of screen sections ////////////////\n      }\n    }\n  };\n};\n\nconst state = getDefaultState();\nvar url = state.url;\nconst getters = {\n  gettersMegaSet12ConfigObj: state => state.MS12_ConfigurationObject,\n  gettersMegaSet8ConfigObj: state => state.MS8_configurationObject\n};\nconst getActions = axios => {\n  return {\n    resetState({\n      commit\n    }) {\n      commit(\"RESET_STATE\");\n    },\n    async MS8_init({\n      commit,\n      rootGetters\n    }) {\n      const header = rootGetters.getHeaders;\n      const payloadset = {\n        transition: \"INIT\",\n        // \"key\": key,\n        data: {\n          header\n        }\n      };\n      try {\n        let response = await axios.post(url, payloadset);\n        if (response.status !== 200) {\n          commit('RESET_STATE');\n          throw new Error(\"FSM Initialization Error\");\n        } else {\n          if (response.data.mBoolean === true) {\n            commit(\"MS12PSD\", {});\n            throw new Error(response.data.errorMessage);\n          } else {\n            commit(\"MS12PSD\", response.data.MegaSet8);\n            return true;\n          }\n        }\n      } catch (err) {\n        ElMessageBox.alert(err.message, 'Message', options);\n      }\n    },\n    async MS8OkButtonEvent({\n      commit,\n      state,\n      rootGetters\n    }, enteredPassword) {\n      const headers = rootGetters.getHeaders;\n      const usersAllowedAcivities = rootGetters.getUsersAllowedAcivities;\n      const isSubBranch = usersAllowedAcivities.subBranchCode > 0 ? \"Y\" : \"N\";\n      const payloadData = {\n        ValidateBatchOpen_DTO: {\n          branchCode: headers.loginBranch,\n          userID: headers.loginUserId,\n          batchNumber: \"\",\n          password: enteredPassword,\n          batchStatus: \"\",\n          opt_batchNumber: \"\",\n          opt_subBranchCode: usersAllowedAcivities.subBranchCode,\n          opt_departmentNumber: \"\",\n          opt_batchDate: headers.loginBranchDate,\n          opt_identifier: isSubBranch,\n          res_response: \"userIpAddress,sequenceNumber,batchNumber,batchStatus,subBranchCode\",\n          opt_batchStatus: \"\",\n          errorMessage: \"\"\n        }\n      };\n      const payloadset = {\n        \"transition\": \"OK\",\n        // \"key\": key,\n        \"data\": {\n          payloadData\n        }\n      };\n      try {\n        let response = await axios.post(url, payloadset, {\n          headers\n        });\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error!!!\");\n        } else {\n          if (response.data.mBoolean === true) {\n            let errorMessage = \"\";\n            if (response.data.errorMessage.startsWith(\"ERROR\")) {\n              errorMessage = \"Invalid Password\";\n            } else {\n              errorMessage = response.data.errorMessage;\n            }\n            commit(\"setPasswordMegaSet8_MT\", '');\n            throw new Error(errorMessage);\n          } else {\n            if (response.data.MegaSet12.batchStatus == \"O\") {\n              commit(\"MS12PSD\", response.data.MegaSet12);\n              commit(\"SaveDepIP\", response.data);\n              commit(\"setPasswordMegaSet8_MT\", '');\n              return response.data.MegaSet12;\n            }\n            return null;\n          }\n        }\n      } catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    },\n    async BackButtonEvent({\n      commit\n    }) {\n      const payloadset = {\n        \"transition\": \"BACK\",\n        // \"key\": key,\n        \"data\": {}\n      };\n      let response = await axios.post(url, payloadset);\n      try {\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error\");\n        } else {\n          return true;\n        }\n      } catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    },\n    MS8PasswordTextBox({\n      commit\n    }, val) {\n      commit(\"setPasswordMegaSet8_MT\", val);\n    },\n    async MS12okButton() {\n      const payloadSet = {\n        \"transition\": \"OK\",\n        // \"key\": key,\n        \"data\": {}\n      };\n      let response = await axios.post(url, payloadSet);\n      try {\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error\");\n        } else {\n          return true;\n        }\n      } catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    }\n  };\n};\n\n// const actions = {\n//   resetState({ commit }) {\n//     commit(\"RESET_STATE\")\n//   },\n//   async MS8_init({ commit, rootGetters }) {\n//     const header = rootGetters.getHeaders;\n//     const payloadset = {\n//       transition: \"INIT\",\n//       // \"key\": key,\n//       data: { header }\n//     }\n\n//     try {\n//       let response = await axios.post(url, payloadset)\n//       if (response.status !== 200) {\n//         commit('RESET_STATE');\n//         throw new Error(\"FSM Initialization Error\");\n//       }\n//       else {\n//         if (response.data.mBoolean === true) {\n//           commit(\"MS12PSD\", {})\n//           throw new Error(response.data.errorMessage)\n//         }\n//         else {\n//           commit(\"MS12PSD\", response.data.MegaSet8)\n//           return true;\n//         }\n//       }\n//     }\n//     catch (err) {\n//       ElMessageBox.alert(err.message, 'Message', options);\n//     }\n//   },\n\n//   async MS8OkButtonEvent({ commit, state, rootGetters }, enteredPassword) {\n\n//     const headers = rootGetters.getHeaders;\n//     const usersAllowedAcivities = rootGetters.getUsersAllowedAcivities;\n//     const isSubBranch = (usersAllowedAcivities.subBranchCode > 0)?\"Y\":\"N\";\n//     const payloadData = {\n//       ValidateBatchOpen_DTO: {\n//         branchCode: headers.loginBranch,\n//         userID: headers.loginUserId,\n//         batchNumber: \"\",\n//         password: enteredPassword,\n//         batchStatus: \"\",\n//         opt_batchNumber: \"\",\n//         opt_subBranchCode: usersAllowedAcivities.subBranchCode,\n//         opt_departmentNumber: \"\",\n//         opt_batchDate: headers.loginBranchDate,\n//         opt_identifier: isSubBranch,\n//         res_response: \"userIpAddress,sequenceNumber,batchNumber,batchStatus,subBranchCode\",\n//         opt_batchStatus: \"\",\n//         errorMessage: \"\"\n//       }\n//     }\n\n//     const payloadset = {\n//       \"transition\": \"OK\",\n//       // \"key\": key,\n//       \"data\": {\n//         payloadData\n//       }\n//     }\n\n//     try {\n//       let response = await axios.post(url, payloadset, { headers });\n\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error!!!\");\n//       } else {\n//         if (response.data.mBoolean === true) {\n//           let errorMessage = \"\";\n//           if(response.data.errorMessage.startsWith(\"ERROR\")) {\n//             errorMessage = \"Invalid Password\";\n//           } else {\n//             errorMessage = response.data.errorMessage;\n//           }\n//           commit(\"setPasswordMegaSet8_MT\", '');\n//           throw new Error(errorMessage);\n//         } else {\n//           if (response.data.MegaSet12.batchStatus == \"O\") {\n//             commit(\"MS12PSD\", response.data.MegaSet12)\n//             commit(\"SaveDepIP\", response.data)\n//             commit(\"setPasswordMegaSet8_MT\", '');\n//             return response.data.MegaSet12;\n//           }\n\n//           return null;\n//         }\n//       }\n//     } catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n\n//   async BackButtonEvent({ commit }) {\n//     const payloadset = {\n//       \"transition\": \"BACK\",\n//       // \"key\": key,\n//       \"data\": {}\n//     }\n\n//     let response = await axios.post(url, payloadset);\n\n//     try {\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error\");\n//       } else {\n//         return true;\n//       }\n//     }\n//     catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n\n//   MS8PasswordTextBox({ commit }, val) {\n//     commit(\"setPasswordMegaSet8_MT\", val);\n//   },\n\n//   async MS12okButton() {\n//     const payloadSet = {\n//       \"transition\": \"OK\",\n//       // \"key\": key,\n//       \"data\": {},\n//     };\n\n//     let response = await axios.post(url, payloadSet);\n\n//     try {\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error\");\n//       }\n//       else {\n//         return true;\n//       }\n//     } catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n// }\n\nconst mutations = {\n  SaveDepIP(state, val) {\n    state.MS12_ConfigurationObject.departmentNo = val.departmentNumber;\n    state.MS12_ConfigurationObject.ipAddress = val.ipAddress;\n  },\n  MS12PSD(state, pasd) {\n    if (pasd !== null && pasd !== undefined) {\n      state.MS12_ConfigurationObject.batchno = pasd.batchNumber;\n      state.MS12_ConfigurationObject.componentProps.InformationLabel.value = pasd.errorMessage;\n    }\n  },\n  setPasswordMegaSet8_MT(state, password) {\n    state.MS8_configurationObject.componentProps.PasswordTextBox.passwordValue = password;\n  },\n  RESET_STATE(state) {\n    Object.assign(state, getDefaultState());\n  }\n};\nexport default {\n  state,\n  getters,\n  getActions,\n  mutations\n};","map":{"version":3,"names":["ref","ElMessageBox","options","axios","getDefaultState","url","process","env","VUE_APP_FSM_URL_BCH_OPN_UC1_OpenBatch","MS12_ConfigurationObject","screenTitle","batchno","departmentNo","ipAddress","componentProps","ReferenceNosLabel","value","isVisible","TransactionNumbersLabel","VoucherNosLabel","InformationLabel","voucherInfoLabel","TransactionInfoLable","ReferenceNumberDropDown","isDisabled","ReferenceNosValue","ReferenceNosList","option","TransactionNumbersDropDown","TransactionNumbersValue","TransactionNumbersList","VoucherNumberDropDown","VoucherNosValue","VoucherNosList","OkButton","BackButton","section1","section2","section3","MS8_configurationObject","batchNo","PasswordTextBox","passwordValue","UserNameTextBox","AuthorizeButton","state","getters","gettersMegaSet12ConfigObj","gettersMegaSet8ConfigObj","getActions","resetState","commit","MS8_init","rootGetters","header","getHeaders","payloadset","transition","data","response","post","status","Error","mBoolean","errorMessage","MegaSet8","err","alert","message","MS8OkButtonEvent","enteredPassword","headers","usersAllowedAcivities","getUsersAllowedAcivities","isSubBranch","subBranchCode","payloadData","ValidateBatchOpen_DTO","branchCode","loginBranch","userID","loginUserId","batchNumber","password","batchStatus","opt_batchNumber","opt_subBranchCode","opt_departmentNumber","opt_batchDate","loginBranchDate","opt_identifier","res_response","opt_batchStatus","startsWith","MegaSet12","error","BackButtonEvent","MS8PasswordTextBox","val","MS12okButton","payloadSet","mutations","SaveDepIP","departmentNumber","MS12PSD","pasd","undefined","setPasswordMegaSet8_MT","RESET_STATE","Object","assign"],"sources":["/home/bahl/MinhajMeraj/Dev Work/Frontend/Portals/EPRC/UseCases/tlr_eprc_sprc_inq_uc3_rpt_eprc/fe/src/UseCase/BCH_OPN_UC1_OpenBatch/BCH_OPN_UC1_OpenBatch.js"],"sourcesContent":["import { ref } from \"vue\";\nimport { ElMessageBox } from 'element-plus'\nimport { options } from \"@/mixins/alertOption\";\nimport axios from 'axios'\n\nconst getDefaultState = () => {\n  return {\n    url: process.env.VUE_APP_FSM_URL_BCH_OPN_UC1_OpenBatch,\n    MS12_ConfigurationObject: {\n      screenTitle: 'Message',\n      batchno: null,\n      departmentNo: null,\n      ipAddress: null,\n      componentProps: {\n        ReferenceNosLabel: {\n          value: 'have been posted',\n          isVisible: false,\n        },\n        TransactionNumbersLabel: {\n          value: 'have been posted',\n          isVisible: false,\n        },\n\n        VoucherNosLabel: {\n          value: 'have been generated',\n          isVisible: false,\n        },\n\n        InformationLabel: {\n          value: ref(''),\n          isVisible: true,\n        },\n\n        voucherInfoLabel: {\n          value: 'Voucher number 7348347 has been Authorized',\n          isVisible: false,\n        },\n\n        TransactionInfoLable: {\n          value: 'Transaction No 738545 Verified',\n          isVisible: false,\n        },\n\n        ReferenceNumberDropDown: {\n          isDisabled: false,\n          ReferenceNosValue: 'A1231',\n          isVisible: false, // set true for Visible Component and set false for invisible Component\n          ReferenceNosList: [\n            { value: 'A1231', option: 'A1231' },\n            { value: 'B1231', option: 'B1231' },\n          ],\n        },\n\n        TransactionNumbersDropDown: {\n          isDisabled: false,\n          TransactionNumbersValue: '1231',\n          isVisible: false, // set true for Visible Component and set false for invisible Component\n          TransactionNumbersList: [\n            {\n              value: '1231',\n              option: '1231',\n            },\n          ],\n        },\n        VoucherNumberDropDown: {\n          isDisabled: false,\n          VoucherNosValue: '1231',\n          isVisible: false, // set true for Visible Component and set false for invisible Component\n          VoucherNosList: [\n            {\n              value: '1231',\n              option: '1231',\n            },\n            {\n              value: 'ABCD',\n              option: 'ABCD',\n            },\n          ],\n        },\n        OkButton: {\n          isDisabled: false,\n          isVisible: true, // set true for Visible Component and set false for invisible Component\n        },\n        BackButton: {\n          isDisabled: false,\n          isVisible: false, // set true for Visible Component and set false for invisible Component\n        },\n        /////////////// control hide/show of screen sections ////////////////\n        section1: {\n          isVisible: true, // set true for Visible Component and set false for invisible Component\n        },\n        section2: {\n          isVisible: true, // set true for Visible Component and set false for invisible Component\n        },\n        section3: {\n          isVisible: true, // set true for Visible Component and set false for invisible Component\n        },\n        ////////////  control hide/show of screen sections ////////////////\n      },\n    },\n\n    MS8_configurationObject: {\n      screenTitle: \"Batch - open\",\n      batchNo: '',\n      componentProps: {\n        PasswordTextBox: {\n          isDisabled: ref(false),\n          isVisible: ref(true), // uncomment this line to hide this component\n          passwordValue: ref(\"\"),\n        },\n        UserNameTextBox: {\n          isDisabled: ref(true),\n          isVisible: ref(false), // uncomment this line to hide this component\n        },\n        AuthorizeButton: {\n          isDisabled: ref(true),\n          isVisible: ref(false), // uncomment this line to hide this component\n        },\n        OkButton: {\n          isDisabled: ref(false),\n          isVisible: ref(true), // uncomment this line to hide this component\n        },\n        BackButton: {\n          isDisabled: ref(false),\n          isVisible: ref(true), // uncomment this line to hide this component\n        },\n        /////////////// control hide/show of screen sections ////////////////\n        section1: {\n          isVisible: ref(true), // set true for Visible Component and set false for invisible Component\n        },\n        section2: {\n          isVisible: ref(true), // set true for Visible Component and set false for invisible Component\n        },\n        section3: {\n          isVisible: ref(true), // set true for Visible Component and set false for invisible Component\n        },\n        ////////////  control hide/show of screen sections ////////////////\n      },\n    },\n  }\n}\nconst state = getDefaultState();\nvar url = state.url\nconst getters = {\n  gettersMegaSet12ConfigObj: (state) => state.MS12_ConfigurationObject,\n  gettersMegaSet8ConfigObj: (state) => state.MS8_configurationObject,\n}\n\nconst getActions = (axios) => {\n  return {\n    resetState({ commit }) {\n      commit(\"RESET_STATE\")\n    },\n    async MS8_init({ commit, rootGetters }) {\n      const header = rootGetters.getHeaders;\n      const payloadset = {\n        transition: \"INIT\",\n        // \"key\": key,\n        data: { header }\n      }\n\n      try {\n        let response = await axios.post(url, payloadset)\n        if (response.status !== 200) {\n          commit('RESET_STATE');\n          throw new Error(\"FSM Initialization Error\");\n        }\n        else {\n          if (response.data.mBoolean === true) {\n            commit(\"MS12PSD\", {})\n            throw new Error(response.data.errorMessage)\n          }\n          else {\n            commit(\"MS12PSD\", response.data.MegaSet8)\n            return true;\n          }\n        }\n      }\n      catch (err) {\n        ElMessageBox.alert(err.message, 'Message', options);\n      }\n    },\n\n    async MS8OkButtonEvent({ commit, state, rootGetters }, enteredPassword) {\n\n      const headers = rootGetters.getHeaders;\n      const usersAllowedAcivities = rootGetters.getUsersAllowedAcivities;\n      const isSubBranch = (usersAllowedAcivities.subBranchCode > 0) ? \"Y\" : \"N\";\n      const payloadData = {\n        ValidateBatchOpen_DTO: {\n          branchCode: headers.loginBranch,\n          userID: headers.loginUserId,\n          batchNumber: \"\",\n          password: enteredPassword,\n          batchStatus: \"\",\n          opt_batchNumber: \"\",\n          opt_subBranchCode: usersAllowedAcivities.subBranchCode,\n          opt_departmentNumber: \"\",\n          opt_batchDate: headers.loginBranchDate,\n          opt_identifier: isSubBranch,\n          res_response: \"userIpAddress,sequenceNumber,batchNumber,batchStatus,subBranchCode\",\n          opt_batchStatus: \"\",\n          errorMessage: \"\"\n        }\n      }\n\n      const payloadset = {\n        \"transition\": \"OK\",\n        // \"key\": key,\n        \"data\": {\n          payloadData\n        }\n      }\n\n      try {\n        let response = await axios.post(url, payloadset, { headers });\n\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error!!!\");\n        } else {\n          if (response.data.mBoolean === true) {\n            let errorMessage = \"\";\n            if (response.data.errorMessage.startsWith(\"ERROR\")) {\n              errorMessage = \"Invalid Password\";\n            } else {\n              errorMessage = response.data.errorMessage;\n            }\n            commit(\"setPasswordMegaSet8_MT\", '');\n            throw new Error(errorMessage);\n          } else {\n            if (response.data.MegaSet12.batchStatus == \"O\") {\n              commit(\"MS12PSD\", response.data.MegaSet12)\n              commit(\"SaveDepIP\", response.data)\n              commit(\"setPasswordMegaSet8_MT\", '');\n              return response.data.MegaSet12;\n            }\n\n            return null;\n          }\n        }\n      } catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    },\n\n    async BackButtonEvent({ commit }) {\n      const payloadset = {\n        \"transition\": \"BACK\",\n        // \"key\": key,\n        \"data\": {}\n      }\n\n      let response = await axios.post(url, payloadset);\n\n      try {\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error\");\n        } else {\n          return true;\n        }\n      }\n      catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    },\n\n    MS8PasswordTextBox({ commit }, val) {\n      commit(\"setPasswordMegaSet8_MT\", val);\n    },\n\n\n    async MS12okButton() {\n      const payloadSet = {\n        \"transition\": \"OK\",\n        // \"key\": key,\n        \"data\": {},\n      };\n\n      let response = await axios.post(url, payloadSet);\n\n      try {\n        if (response.status !== 200) {\n          throw new Error(\"FSM Initialization Error\");\n        }\n        else {\n          return true;\n        }\n      } catch (error) {\n        ElMessageBox.alert(error.message, 'Message', options);\n      }\n    },\n  }\n}\n\n// const actions = {\n//   resetState({ commit }) {\n//     commit(\"RESET_STATE\")\n//   },\n//   async MS8_init({ commit, rootGetters }) {\n//     const header = rootGetters.getHeaders;\n//     const payloadset = {\n//       transition: \"INIT\",\n//       // \"key\": key,\n//       data: { header }\n//     }\n\n//     try {\n//       let response = await axios.post(url, payloadset)\n//       if (response.status !== 200) {\n//         commit('RESET_STATE');\n//         throw new Error(\"FSM Initialization Error\");\n//       }\n//       else {\n//         if (response.data.mBoolean === true) {\n//           commit(\"MS12PSD\", {})\n//           throw new Error(response.data.errorMessage)\n//         }\n//         else {\n//           commit(\"MS12PSD\", response.data.MegaSet8)\n//           return true;\n//         }\n//       }\n//     }\n//     catch (err) {\n//       ElMessageBox.alert(err.message, 'Message', options);\n//     }\n//   },\n\n//   async MS8OkButtonEvent({ commit, state, rootGetters }, enteredPassword) {\n\n//     const headers = rootGetters.getHeaders;\n//     const usersAllowedAcivities = rootGetters.getUsersAllowedAcivities;\n//     const isSubBranch = (usersAllowedAcivities.subBranchCode > 0)?\"Y\":\"N\";\n//     const payloadData = {\n//       ValidateBatchOpen_DTO: {\n//         branchCode: headers.loginBranch,\n//         userID: headers.loginUserId,\n//         batchNumber: \"\",\n//         password: enteredPassword,\n//         batchStatus: \"\",\n//         opt_batchNumber: \"\",\n//         opt_subBranchCode: usersAllowedAcivities.subBranchCode,\n//         opt_departmentNumber: \"\",\n//         opt_batchDate: headers.loginBranchDate,\n//         opt_identifier: isSubBranch,\n//         res_response: \"userIpAddress,sequenceNumber,batchNumber,batchStatus,subBranchCode\",\n//         opt_batchStatus: \"\",\n//         errorMessage: \"\"\n//       }\n//     }\n\n//     const payloadset = {\n//       \"transition\": \"OK\",\n//       // \"key\": key,\n//       \"data\": {\n//         payloadData\n//       }\n//     }\n\n//     try {\n//       let response = await axios.post(url, payloadset, { headers });\n\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error!!!\");\n//       } else {\n//         if (response.data.mBoolean === true) {\n//           let errorMessage = \"\";\n//           if(response.data.errorMessage.startsWith(\"ERROR\")) {\n//             errorMessage = \"Invalid Password\";\n//           } else {\n//             errorMessage = response.data.errorMessage;\n//           }\n//           commit(\"setPasswordMegaSet8_MT\", '');\n//           throw new Error(errorMessage);\n//         } else {\n//           if (response.data.MegaSet12.batchStatus == \"O\") {\n//             commit(\"MS12PSD\", response.data.MegaSet12)\n//             commit(\"SaveDepIP\", response.data)\n//             commit(\"setPasswordMegaSet8_MT\", '');\n//             return response.data.MegaSet12;\n//           }\n\n//           return null;\n//         }\n//       }\n//     } catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n\n//   async BackButtonEvent({ commit }) {\n//     const payloadset = {\n//       \"transition\": \"BACK\",\n//       // \"key\": key,\n//       \"data\": {}\n//     }\n\n//     let response = await axios.post(url, payloadset);\n\n//     try {\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error\");\n//       } else {\n//         return true;\n//       }\n//     }\n//     catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n\n//   MS8PasswordTextBox({ commit }, val) {\n//     commit(\"setPasswordMegaSet8_MT\", val);\n//   },\n\n\n//   async MS12okButton() {\n//     const payloadSet = {\n//       \"transition\": \"OK\",\n//       // \"key\": key,\n//       \"data\": {},\n//     };\n\n//     let response = await axios.post(url, payloadSet);\n\n//     try {\n//       if (response.status !== 200) {\n//         throw new Error(\"FSM Initialization Error\");\n//       }\n//       else {\n//         return true;\n//       }\n//     } catch (error) {\n//       ElMessageBox.alert(error.message, 'Message', options);\n//     }\n//   },\n// }\n\nconst mutations = {\n  SaveDepIP(state, val) {\n    state.MS12_ConfigurationObject.departmentNo = val.departmentNumber;\n    state.MS12_ConfigurationObject.ipAddress = val.ipAddress\n  },\n\n  MS12PSD(state, pasd) {\n    if (pasd !== null && pasd !== undefined) {\n      state.MS12_ConfigurationObject.batchno = pasd.batchNumber;\n      state.MS12_ConfigurationObject.componentProps.InformationLabel.value = pasd.errorMessage;\n    }\n  },\n\n  setPasswordMegaSet8_MT(state, password) {\n    state.MS8_configurationObject.componentProps.PasswordTextBox.passwordValue = password;\n  },\n\n  RESET_STATE(state) {\n    Object.assign(state, getDefaultState())\n  },\n\n}\nexport default {\n  state,\n  getters,\n  getActions,\n  mutations\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,OAAO;IACLC,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,qCAAqC;IACtDC,wBAAwB,EAAE;MACxBC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE,IAAI;MAClBC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE;QACdC,iBAAiB,EAAE;UACjBC,KAAK,EAAE,kBAAkB;UACzBC,SAAS,EAAE;QACb,CAAC;QACDC,uBAAuB,EAAE;UACvBF,KAAK,EAAE,kBAAkB;UACzBC,SAAS,EAAE;QACb,CAAC;QAEDE,eAAe,EAAE;UACfH,KAAK,EAAE,qBAAqB;UAC5BC,SAAS,EAAE;QACb,CAAC;QAEDG,gBAAgB,EAAE;UAChBJ,KAAK,EAAEhB,GAAG,CAAC,EAAE,CAAC;UACdiB,SAAS,EAAE;QACb,CAAC;QAEDI,gBAAgB,EAAE;UAChBL,KAAK,EAAE,4CAA4C;UACnDC,SAAS,EAAE;QACb,CAAC;QAEDK,oBAAoB,EAAE;UACpBN,KAAK,EAAE,gCAAgC;UACvCC,SAAS,EAAE;QACb,CAAC;QAEDM,uBAAuB,EAAE;UACvBC,UAAU,EAAE,KAAK;UACjBC,iBAAiB,EAAE,OAAO;UAC1BR,SAAS,EAAE,KAAK;UAAE;UAClBS,gBAAgB,EAAE,CAChB;YAAEV,KAAK,EAAE,OAAO;YAAEW,MAAM,EAAE;UAAQ,CAAC,EACnC;YAAEX,KAAK,EAAE,OAAO;YAAEW,MAAM,EAAE;UAAQ,CAAC;QAEvC,CAAC;QAEDC,0BAA0B,EAAE;UAC1BJ,UAAU,EAAE,KAAK;UACjBK,uBAAuB,EAAE,MAAM;UAC/BZ,SAAS,EAAE,KAAK;UAAE;UAClBa,sBAAsB,EAAE,CACtB;YACEd,KAAK,EAAE,MAAM;YACbW,MAAM,EAAE;UACV,CAAC;QAEL,CAAC;QACDI,qBAAqB,EAAE;UACrBP,UAAU,EAAE,KAAK;UACjBQ,eAAe,EAAE,MAAM;UACvBf,SAAS,EAAE,KAAK;UAAE;UAClBgB,cAAc,EAAE,CACd;YACEjB,KAAK,EAAE,MAAM;YACbW,MAAM,EAAE;UACV,CAAC,EACD;YACEX,KAAK,EAAE,MAAM;YACbW,MAAM,EAAE;UACV,CAAC;QAEL,CAAC;QACDO,QAAQ,EAAE;UACRV,UAAU,EAAE,KAAK;UACjBP,SAAS,EAAE,IAAI,CAAE;QACnB,CAAC;;QACDkB,UAAU,EAAE;UACVX,UAAU,EAAE,KAAK;UACjBP,SAAS,EAAE,KAAK,CAAE;QACpB,CAAC;;QACD;QACAmB,QAAQ,EAAE;UACRnB,SAAS,EAAE,IAAI,CAAE;QACnB,CAAC;;QACDoB,QAAQ,EAAE;UACRpB,SAAS,EAAE,IAAI,CAAE;QACnB,CAAC;;QACDqB,QAAQ,EAAE;UACRrB,SAAS,EAAE,IAAI,CAAE;QACnB;QACA;MACF;IACF,CAAC;;IAEDsB,uBAAuB,EAAE;MACvB7B,WAAW,EAAE,cAAc;MAC3B8B,OAAO,EAAE,EAAE;MACX1B,cAAc,EAAE;QACd2B,eAAe,EAAE;UACfjB,UAAU,EAAExB,GAAG,CAAC,KAAK,CAAC;UACtBiB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC;UAAE;UACtB0C,aAAa,EAAE1C,GAAG,CAAC,EAAE;QACvB,CAAC;QACD2C,eAAe,EAAE;UACfnB,UAAU,EAAExB,GAAG,CAAC,IAAI,CAAC;UACrBiB,SAAS,EAAEjB,GAAG,CAAC,KAAK,CAAC,CAAE;QACzB,CAAC;;QACD4C,eAAe,EAAE;UACfpB,UAAU,EAAExB,GAAG,CAAC,IAAI,CAAC;UACrBiB,SAAS,EAAEjB,GAAG,CAAC,KAAK,CAAC,CAAE;QACzB,CAAC;;QACDkC,QAAQ,EAAE;UACRV,UAAU,EAAExB,GAAG,CAAC,KAAK,CAAC;UACtBiB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC,CAAE;QACxB,CAAC;;QACDmC,UAAU,EAAE;UACVX,UAAU,EAAExB,GAAG,CAAC,KAAK,CAAC;UACtBiB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC,CAAE;QACxB,CAAC;;QACD;QACAoC,QAAQ,EAAE;UACRnB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC,CAAE;QACxB,CAAC;;QACDqC,QAAQ,EAAE;UACRpB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC,CAAE;QACxB,CAAC;;QACDsC,QAAQ,EAAE;UACRrB,SAAS,EAAEjB,GAAG,CAAC,IAAI,CAAC,CAAE;QACxB;QACA;MACF;IACF;EACF,CAAC;AACH,CAAC;;AACD,MAAM6C,KAAK,GAAGzC,eAAe,CAAC,CAAC;AAC/B,IAAIC,GAAG,GAAGwC,KAAK,CAACxC,GAAG;AACnB,MAAMyC,OAAO,GAAG;EACdC,yBAAyB,EAAGF,KAAK,IAAKA,KAAK,CAACpC,wBAAwB;EACpEuC,wBAAwB,EAAGH,KAAK,IAAKA,KAAK,CAACN;AAC7C,CAAC;AAED,MAAMU,UAAU,GAAI9C,KAAK,IAAK;EAC5B,OAAO;IACL+C,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACrBA,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IACD,MAAMC,QAAQA,CAAC;MAAED,MAAM;MAAEE;IAAY,CAAC,EAAE;MACtC,MAAMC,MAAM,GAAGD,WAAW,CAACE,UAAU;MACrC,MAAMC,UAAU,GAAG;QACjBC,UAAU,EAAE,MAAM;QAClB;QACAC,IAAI,EAAE;UAAEJ;QAAO;MACjB,CAAC;MAED,IAAI;QACF,IAAIK,QAAQ,GAAG,MAAMxD,KAAK,CAACyD,IAAI,CAACvD,GAAG,EAAEmD,UAAU,CAAC;QAChD,IAAIG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3BV,MAAM,CAAC,aAAa,CAAC;UACrB,MAAM,IAAIW,KAAK,CAAC,0BAA0B,CAAC;QAC7C,CAAC,MACI;UACH,IAAIH,QAAQ,CAACD,IAAI,CAACK,QAAQ,KAAK,IAAI,EAAE;YACnCZ,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACrB,MAAM,IAAIW,KAAK,CAACH,QAAQ,CAACD,IAAI,CAACM,YAAY,CAAC;UAC7C,CAAC,MACI;YACHb,MAAM,CAAC,SAAS,EAAEQ,QAAQ,CAACD,IAAI,CAACO,QAAQ,CAAC;YACzC,OAAO,IAAI;UACb;QACF;MACF,CAAC,CACD,OAAOC,GAAG,EAAE;QACVjE,YAAY,CAACkE,KAAK,CAACD,GAAG,CAACE,OAAO,EAAE,SAAS,EAAElE,OAAO,CAAC;MACrD;IACF,CAAC;IAED,MAAMmE,gBAAgBA,CAAC;MAAElB,MAAM;MAAEN,KAAK;MAAEQ;IAAY,CAAC,EAAEiB,eAAe,EAAE;MAEtE,MAAMC,OAAO,GAAGlB,WAAW,CAACE,UAAU;MACtC,MAAMiB,qBAAqB,GAAGnB,WAAW,CAACoB,wBAAwB;MAClE,MAAMC,WAAW,GAAIF,qBAAqB,CAACG,aAAa,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG;MACzE,MAAMC,WAAW,GAAG;QAClBC,qBAAqB,EAAE;UACrBC,UAAU,EAAEP,OAAO,CAACQ,WAAW;UAC/BC,MAAM,EAAET,OAAO,CAACU,WAAW;UAC3BC,WAAW,EAAE,EAAE;UACfC,QAAQ,EAAEb,eAAe;UACzBc,WAAW,EAAE,EAAE;UACfC,eAAe,EAAE,EAAE;UACnBC,iBAAiB,EAAEd,qBAAqB,CAACG,aAAa;UACtDY,oBAAoB,EAAE,EAAE;UACxBC,aAAa,EAAEjB,OAAO,CAACkB,eAAe;UACtCC,cAAc,EAAEhB,WAAW;UAC3BiB,YAAY,EAAE,oEAAoE;UAClFC,eAAe,EAAE,EAAE;UACnB5B,YAAY,EAAE;QAChB;MACF,CAAC;MAED,MAAMR,UAAU,GAAG;QACjB,YAAY,EAAE,IAAI;QAClB;QACA,MAAM,EAAE;UACNoB;QACF;MACF,CAAC;MAED,IAAI;QACF,IAAIjB,QAAQ,GAAG,MAAMxD,KAAK,CAACyD,IAAI,CAACvD,GAAG,EAAEmD,UAAU,EAAE;UAAEe;QAAQ,CAAC,CAAC;QAE7D,IAAIZ,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD,CAAC,MAAM;UACL,IAAIH,QAAQ,CAACD,IAAI,CAACK,QAAQ,KAAK,IAAI,EAAE;YACnC,IAAIC,YAAY,GAAG,EAAE;YACrB,IAAIL,QAAQ,CAACD,IAAI,CAACM,YAAY,CAAC6B,UAAU,CAAC,OAAO,CAAC,EAAE;cAClD7B,YAAY,GAAG,kBAAkB;YACnC,CAAC,MAAM;cACLA,YAAY,GAAGL,QAAQ,CAACD,IAAI,CAACM,YAAY;YAC3C;YACAb,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC;YACpC,MAAM,IAAIW,KAAK,CAACE,YAAY,CAAC;UAC/B,CAAC,MAAM;YACL,IAAIL,QAAQ,CAACD,IAAI,CAACoC,SAAS,CAACV,WAAW,IAAI,GAAG,EAAE;cAC9CjC,MAAM,CAAC,SAAS,EAAEQ,QAAQ,CAACD,IAAI,CAACoC,SAAS,CAAC;cAC1C3C,MAAM,CAAC,WAAW,EAAEQ,QAAQ,CAACD,IAAI,CAAC;cAClCP,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC;cACpC,OAAOQ,QAAQ,CAACD,IAAI,CAACoC,SAAS;YAChC;YAEA,OAAO,IAAI;UACb;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd9F,YAAY,CAACkE,KAAK,CAAC4B,KAAK,CAAC3B,OAAO,EAAE,SAAS,EAAElE,OAAO,CAAC;MACvD;IACF,CAAC;IAED,MAAM8F,eAAeA,CAAC;MAAE7C;IAAO,CAAC,EAAE;MAChC,MAAMK,UAAU,GAAG;QACjB,YAAY,EAAE,MAAM;QACpB;QACA,MAAM,EAAE,CAAC;MACX,CAAC;MAED,IAAIG,QAAQ,GAAG,MAAMxD,KAAK,CAACyD,IAAI,CAACvD,GAAG,EAAEmD,UAAU,CAAC;MAEhD,IAAI;QACF,IAAIG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7C,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,CACD,OAAOiC,KAAK,EAAE;QACZ9F,YAAY,CAACkE,KAAK,CAAC4B,KAAK,CAAC3B,OAAO,EAAE,SAAS,EAAElE,OAAO,CAAC;MACvD;IACF,CAAC;IAED+F,kBAAkBA,CAAC;MAAE9C;IAAO,CAAC,EAAE+C,GAAG,EAAE;MAClC/C,MAAM,CAAC,wBAAwB,EAAE+C,GAAG,CAAC;IACvC,CAAC;IAGD,MAAMC,YAAYA,CAAA,EAAG;MACnB,MAAMC,UAAU,GAAG;QACjB,YAAY,EAAE,IAAI;QAClB;QACA,MAAM,EAAE,CAAC;MACX,CAAC;MAED,IAAIzC,QAAQ,GAAG,MAAMxD,KAAK,CAACyD,IAAI,CAACvD,GAAG,EAAE+F,UAAU,CAAC;MAEhD,IAAI;QACF,IAAIzC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7C,CAAC,MACI;UACH,OAAO,IAAI;QACb;MACF,CAAC,CAAC,OAAOiC,KAAK,EAAE;QACd9F,YAAY,CAACkE,KAAK,CAAC4B,KAAK,CAAC3B,OAAO,EAAE,SAAS,EAAElE,OAAO,CAAC;MACvD;IACF;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMmG,SAAS,GAAG;EAChBC,SAASA,CAACzD,KAAK,EAAEqD,GAAG,EAAE;IACpBrD,KAAK,CAACpC,wBAAwB,CAACG,YAAY,GAAGsF,GAAG,CAACK,gBAAgB;IAClE1D,KAAK,CAACpC,wBAAwB,CAACI,SAAS,GAAGqF,GAAG,CAACrF,SAAS;EAC1D,CAAC;EAED2F,OAAOA,CAAC3D,KAAK,EAAE4D,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS,EAAE;MACvC7D,KAAK,CAACpC,wBAAwB,CAACE,OAAO,GAAG8F,IAAI,CAACvB,WAAW;MACzDrC,KAAK,CAACpC,wBAAwB,CAACK,cAAc,CAACM,gBAAgB,CAACJ,KAAK,GAAGyF,IAAI,CAACzC,YAAY;IAC1F;EACF,CAAC;EAED2C,sBAAsBA,CAAC9D,KAAK,EAAEsC,QAAQ,EAAE;IACtCtC,KAAK,CAACN,uBAAuB,CAACzB,cAAc,CAAC2B,eAAe,CAACC,aAAa,GAAGyC,QAAQ;EACvF,CAAC;EAEDyB,WAAWA,CAAC/D,KAAK,EAAE;IACjBgE,MAAM,CAACC,MAAM,CAACjE,KAAK,EAAEzC,eAAe,CAAC,CAAC,CAAC;EACzC;AAEF,CAAC;AACD,eAAe;EACbyC,KAAK;EACLC,OAAO;EACPG,UAAU;EACVoD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}