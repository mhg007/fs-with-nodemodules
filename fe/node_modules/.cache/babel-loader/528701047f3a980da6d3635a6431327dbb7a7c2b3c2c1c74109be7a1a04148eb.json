{"ast":null,"code":"import { ElMessageBox } from 'element-plus';\nimport moment from 'moment';\nconst alertDefaults = {\n  draggable: true,\n  showClose: false,\n  autofocus: true,\n  closeOnClickModal: false,\n  closeOnPressEscape: false,\n  dangerouslyUseHTMLString: true\n};\nconst confirmDefaults = {\n  center: true,\n  draggable: true,\n  showClose: false,\n  autofocus: true,\n  closeOnPressEscape: false,\n  closeOnClickModal: false,\n  cancelButtonClass: \"btn-custom-cancel\",\n  dangerouslyUseHTMLString: true\n};\nconst plz = (num, size) => String(num).padStart(size, '0');\n/** Checks whether specified `val` is an empty or nil (`null` | `undefined`) string\n * @param {*} val The value to check\n * @returns {boolean} Whether specified `val` is an empty or nil (`null` | `undefined`) string */\nconst isNOES = val => !(typeof val === 'string' && val !== '');\nconst helper = {\n  /** Checks whether specified `val` is an empty or nil (`null` | `undefined`) string\n  * @param {string} val The value to check\n  * @returns {boolean} Whether specified `val` is an empty or nil (`null` | `undefined`) string */\n  isNilOrEmpty: isNOES,\n  /** Focuses specified element\n   * @param {string | Object} target The **`id`** of the target element as a **`string`** or \n   * the element itself as an **`object`** having **`focus()`** method */\n  focus(target) {\n    if (typeof target === 'string' && target !== '' && document && document.getElementById) {\n      target = document.getElementById(target);\n    }\n    if (typeof target === 'object' && typeof target.focus === 'function') {\n      target.focus();\n    }\n  },\n  /** Opens Alert Message Box\n   * @param {string|object} message The message to display\n   * @param {string} title The title of Message Box\n   * @returns {Promise} Returns **`Promise`** object for further processing */\n  alert(message, title = 'Message') {\n    var _ref;\n    const msg = (_ref = typeof message === 'string' ? message : typeof message === 'object' && typeof message.message === 'string' ? message.message : undefined) !== null && _ref !== void 0 ? _ref : '';\n    return ElMessageBox.alert(msg, title !== null && title !== void 0 ? title : 'Message', alertDefaults);\n  },\n  /** Opens Confirm Message Box \n   * @param {String} message The message to display\n   * @param {*} title The title of Message Box\n   * @param {*} option The option of confirm Message Box\n   * @returns {Promise} Returns **`Promise`** object for further processing */\n  confirm(message, title, option) {\n    const currentOptions = Object.assign(option, confirmDefaults);\n    return ElMessageBox.confirm(message, title !== null && title !== void 0 ? title : 'Message', currentOptions);\n  },\n  /** Pads leading zeros \n   * @param {Number} num The value to be padded\n   * @param {Number} size The max length of ouput string after padding\n   * @returns {String} The padded string */\n  padLeadingZeros: plz,\n  date: {\n    /** Converts **Database (DB)** date format **`'YYYY-MM-DD'`** into **Front-end (FE)** date format **`'DD/MM/YYYY'`**\n     * @param {String} date The date in **Database (DB)** format **`'YYYY-MM-DD'`**\n     * @returns {String} Returns date in **Front-end (FE)** format **`'DD/MM/YYYY'`** */\n    dbToFe(date) {\n      return !helper.isNilOrEmpty(date) ? moment(date).format('DD/MM/YYYY') : undefined;\n    },\n    /** Converts **Front-end (FE)** date format **`'DD/MM/YYYY'`** into **Database (DB)** date format **`'YYYY-MM-DD'`**\n     * @param {String} date The date in  **Front-end (FE)** format **`'DD/MM/YYYY'`**\n     * @returns {String} Returns date in **Database (DB)** format **`'YYYY-MM-DD'`** */\n    feToDb(date) {\n      return !helper.isNilOrEmpty(date) ? moment(date, 'DD/MM/YYYY').format('YYYY-MM-DD') : undefined;\n    }\n  },\n  acctNum: {\n    /** Concatenates Account Number fragments with dashes\n     * @param {Number|String} branch The branch number\n     * @param {Number|String} type The account type number\n     * @param {Number|String} cust The Customer number\n     * @param {Number|String} run The run digits\n     * @param {Number|String} digit The checksum digit\n     * @returns Returns Account Number concatenated with dashes */\n    hyphenateBTCRD(branch, type, cust, run, digit) {\n      return [plz(branch, 4), plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('-');\n    },\n    /** Concatenates Account Number fragments\n     * @param {Number|String} branch The branch number\n     * @param {Number|String} type The account type number\n     * @param {Number|String} cust The Customer number\n     * @param {Number|String} run The run digits\n     * @param {Number|String} digit The checksum digit\n     * @returns Returns concatenated Account Number */\n    concatBTCRD(branch, type, cust, run, digit) {\n      return [plz(branch, 4), plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('');\n    },\n    /** Concatenates Account Number fragments         \n     * @param {Number|String} type The account type number\n     * @param {Number|String} cust The Customer number\n     * @param {Number|String} run The run digits\n     * @param {Number|String} digit The checksum digit\n     * @returns Returns concatenated Account Number */\n    concatTCRD(type, cust, run, digit) {\n      return [plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('');\n    },\n    /** Concatenates Account Number fragments with dashes         \n     * @param {Number|String} type The account type number\n     * @param {Number|String} cust The Customer number\n     * @param {Number|String} run The run digits\n     * @param {Number|String} digit The checksum digit\n     * @returns Returns Account Number concatenated with dashes */\n    hyphenateTCRD(type, cust, run, digit) {\n      return [plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('-');\n    }\n  }\n};\nexport default helper;","map":{"version":3,"names":["ElMessageBox","moment","alertDefaults","draggable","showClose","autofocus","closeOnClickModal","closeOnPressEscape","dangerouslyUseHTMLString","confirmDefaults","center","cancelButtonClass","plz","num","size","String","padStart","isNOES","val","helper","isNilOrEmpty","focus","target","document","getElementById","alert","message","title","_ref","msg","undefined","confirm","option","currentOptions","Object","assign","padLeadingZeros","date","dbToFe","format","feToDb","acctNum","hyphenateBTCRD","branch","type","cust","run","digit","join","concatBTCRD","concatTCRD","hyphenateTCRD"],"sources":["/home/bahl/Downloads/tlr_eprc_sprc_inq_uc3_rpt_eprc/fe/node_modules/@teresol-v2/usecase-hoc/lib/UseCaseHelper.js"],"sourcesContent":["import { ElMessageBox } from 'element-plus';\nimport moment from 'moment';\nconst alertDefaults = {\n    draggable: true,\n    showClose: false,\n    autofocus: true,\n    closeOnClickModal: false,\n    closeOnPressEscape: false,\n    dangerouslyUseHTMLString: true,\n};\nconst confirmDefaults = {\n    center: true,\n    draggable: true,\n    showClose: false,\n    autofocus: true,\n    closeOnPressEscape: false,\n    closeOnClickModal: false,\n    cancelButtonClass: \"btn-custom-cancel\",\n    dangerouslyUseHTMLString: true,\n};\nconst plz = (num, size) => String(num).padStart(size, '0');\n/** Checks whether specified `val` is an empty or nil (`null` | `undefined`) string\n * @param {*} val The value to check\n * @returns {boolean} Whether specified `val` is an empty or nil (`null` | `undefined`) string */\nconst isNOES = (val) => !(typeof val === 'string' && val !== '');\nconst helper = {\n    /** Checks whether specified `val` is an empty or nil (`null` | `undefined`) string\n    * @param {string} val The value to check\n    * @returns {boolean} Whether specified `val` is an empty or nil (`null` | `undefined`) string */\n    isNilOrEmpty: isNOES,\n    /** Focuses specified element\n     * @param {string | Object} target The **`id`** of the target element as a **`string`** or \n     * the element itself as an **`object`** having **`focus()`** method */\n    focus(target) {\n        if (typeof target === 'string' && target !== '' && document && document.getElementById) { target = document.getElementById(target); }\n        if (typeof target === 'object' && typeof target.focus === 'function') { target.focus(); }\n    },\n    /** Opens Alert Message Box\n     * @param {string|object} message The message to display\n     * @param {string} title The title of Message Box\n     * @returns {Promise} Returns **`Promise`** object for further processing */\n    alert(message, title = 'Message') { \n        const msg = (typeof message === 'string' ? message : (typeof message === 'object' && typeof message.message === 'string' ? message.message : undefined)) ?? '';\n        return ElMessageBox.alert(msg, title ?? 'Message', alertDefaults); \n    },\n    /** Opens Confirm Message Box \n     * @param {String} message The message to display\n     * @param {*} title The title of Message Box\n     * @param {*} option The option of confirm Message Box\n     * @returns {Promise} Returns **`Promise`** object for further processing */\n    confirm(message, title, option) {        \n        const currentOptions = Object.assign(option, confirmDefaults)\n        return ElMessageBox.confirm(message, title ?? 'Message', currentOptions);\n    },\n    /** Pads leading zeros \n     * @param {Number} num The value to be padded\n     * @param {Number} size The max length of ouput string after padding\n     * @returns {String} The padded string */\n    padLeadingZeros: plz,\n    date: {\n        /** Converts **Database (DB)** date format **`'YYYY-MM-DD'`** into **Front-end (FE)** date format **`'DD/MM/YYYY'`**\n         * @param {String} date The date in **Database (DB)** format **`'YYYY-MM-DD'`**\n         * @returns {String} Returns date in **Front-end (FE)** format **`'DD/MM/YYYY'`** */\n        dbToFe(date) { return !helper.isNilOrEmpty(date) ? moment(date).format('DD/MM/YYYY') : undefined; },\n        /** Converts **Front-end (FE)** date format **`'DD/MM/YYYY'`** into **Database (DB)** date format **`'YYYY-MM-DD'`**\n         * @param {String} date The date in  **Front-end (FE)** format **`'DD/MM/YYYY'`**\n         * @returns {String} Returns date in **Database (DB)** format **`'YYYY-MM-DD'`** */\n        feToDb(date) { return !helper.isNilOrEmpty(date) ? moment(date, 'DD/MM/YYYY').format('YYYY-MM-DD') : undefined; }\n    },    \n    acctNum: {\n        /** Concatenates Account Number fragments with dashes\n         * @param {Number|String} branch The branch number\n         * @param {Number|String} type The account type number\n         * @param {Number|String} cust The Customer number\n         * @param {Number|String} run The run digits\n         * @param {Number|String} digit The checksum digit\n         * @returns Returns Account Number concatenated with dashes */\n        hyphenateBTCRD(branch, type, cust, run, digit) { return [plz(branch, 4), plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('-'); },\n        /** Concatenates Account Number fragments\n         * @param {Number|String} branch The branch number\n         * @param {Number|String} type The account type number\n         * @param {Number|String} cust The Customer number\n         * @param {Number|String} run The run digits\n         * @param {Number|String} digit The checksum digit\n         * @returns Returns concatenated Account Number */\n        concatBTCRD(branch, type, cust, run, digit) { return [plz(branch, 4), plz(type, 4), plz(cust, 6), plz(run, 2), digit].join(''); },\n        /** Concatenates Account Number fragments         \n         * @param {Number|String} type The account type number\n         * @param {Number|String} cust The Customer number\n         * @param {Number|String} run The run digits\n         * @param {Number|String} digit The checksum digit\n         * @returns Returns concatenated Account Number */\n        concatTCRD(type, cust, run, digit) { return [plz(type, 4), plz(cust, 6), plz(run, 2), digit].join(''); },\n        /** Concatenates Account Number fragments with dashes         \n         * @param {Number|String} type The account type number\n         * @param {Number|String} cust The Customer number\n         * @param {Number|String} run The run digits\n         * @param {Number|String} digit The checksum digit\n         * @returns Returns Account Number concatenated with dashes */\n        hyphenateTCRD(type, cust, run, digit) { return [plz(type, 4), plz(cust, 6), plz(run, 2), digit].join('-'); }\n    }\n};\nexport default helper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}